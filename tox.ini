[tox]
envlist = py36-tests
skipsdist = true
minversion = 3.8.0
requires =
  tox-pip-extensions
  tox-pyenv
  tox-envfile
tox_pip_extensions_ext_venv_update = true
# Exclusively use Python commands from pyenv's copies of Python, don't fall
# back to tox's default non-pyenv command search strategy.
tox_pyenv_fallback = false

[pytest]
filterwarnings =
    # Fail the tests if there are any warnings.
    error

    # Ignore certain specific warnings. One line per warning to ignore. The
    # pattern is:
    #
    # ignore:<WARNING_MESSAGE>:<WARNING_CATEGORY>:<MODULE>
    #
    # <WARNING_MESSAGE> is a regex that must match the warning message that you
    # want to ignore.
    #
    # <WARNING_CATEGORY> is the class of the warning that you want to ignore,
    # e.g. DeprecationWarning. See:
    # https://docs.python.org/2/library/warnings.html#warning-categories
    #
    # <MODULE> is the name of the module that the warning originates from.
    #
    # See https://docs.python.org/3/library/warnings.html and
    # https://docs.pytest.org/en/latest/warnings.html
    #
    ignore:^Use of \.\. or absolute path in a resource path is not allowed and will raise exceptions in a future release\.$:DeprecationWarning:pkg_resources

    # Ignore WebOb warnings that just say "<method> will be changing in the
    # future" and don't say how it will be changing or what developers can do
    # now to avoid the warning. I don't think these warnings _can_ be avoided
    # currently.
    ignore:^The behavior of \.best_match for the Accept classes is currently being maintained for backward compatibility, but the method will be deprecated in the future, as its behavior is not specified in \(and currently does not conform to\) RFC 7231\.$:DeprecationWarning:webob.acceptparse
    ignore:^The behavior of \.__contains__ for the Accept classes is currently being maintained for backward compatibility, but it will change in the future to better conform to the RFC\.$:DeprecationWarning:webob.acceptparse
    ignore:^The behavior of AcceptValidHeader\.best_match is currently being maintained for backward compatibility, but it will be deprecated in the future, as it does not conform to the RFC\.$:DeprecationWarning:webob.acceptparse
    ignore:^The behavior of AcceptValidHeader\.__contains__ is currently being maintained for backward compatibility, but it will change in the future to better conform to the RFC\.$:DeprecationWarning:webob.acceptparse
    ignore:^The behavior of AcceptLanguageValidHeader\.__iter__ is currently maintained for backward compatibility, but will change in the future.$:DeprecationWarning:webob.acceptparse

[testenv]
skip_install = true
sitepackages = {env:SITE_PACKAGES:false}
passenv =
    HOME
    dev: AUTHORITY
    dev: BOUNCER_URL
    dev: CLIENT_OAUTH_ID
    dev: CLIENT_RPC_ALLOWED_ORIGINS
    dev: CLIENT_URL
    dev: GOOGLE_ANALYTICS_TRACKING_ID
    dev: GOOGLE_ANALYTICS_CLIENT_TRACKING_ID
    dev: SENTRY_DSN
    dev: SENTRY_DSN_CLIENT
    dev: SENTRY_DSN_FRONTEND
    dev: SENTRY_ENVIRONMENT
    dev: USE_HTTPS
    dev: WEBSOCKET_URL
    dev: NEW_RELIC_LICENSE_KEY
    dev: NEW_RELIC_APP_NAME
    {tests,functests}: TEST_DATABASE_URL
    {tests,functests}: ELASTICSEARCH_URL
    {tests,functests}: PYTEST_ADDOPTS
    functests: BROKER_URL
    codecov: CI TRAVIS*
setenv = dev: PYTHONPATH = .
deps =
    tests: coverage
    {tests,functests,docstrings,checkdocstrings,analyze}: pytest
    {tests,functests,docstrings,checkdocstrings,analyze}: factory-boy
    {tests,docstrings,checkdocstrings,analyze}: hypothesis
    lint: flake8
    {format,checkformatting}: black
    coverage: coverage
    codecov: codecov
    {functests,docstrings,checkdocstrings,analyze}: webtest
    {docs,docstrings}: sphinx-autobuild
    {docs,checkdocs,docstrings,checkdocstrings}: sphinx
    {docs,checkdocs,docstrings,checkdocstrings}: sphinx_rtd_theme
    {tests,functests,docstrings,checkdocstrings,analyze}: -r requirements.txt
    analyze: pylint
    dev: ipython
    dev: ipdb
    dev: -r requirements-dev.in
    docker-compose: docker-compose
    pip-compile: pip-tools
whitelist_externals =
    {dev,tests,functests,pip-compile}: sh
changedir =
    {docs,checkdocs}: docs
commands =
    dev: sh bin/hypothesis --dev init
    dev: {posargs:sh bin/hypothesis devserver}
    lint: flake8 h
    lint: flake8 tests
    analyze: pylint {posargs:h tests}
    format: black h tests
    checkformatting: black --check h tests
    {tests,functests}: sh bin/create-testdb
    tests: coverage run -m pytest {posargs:tests/h/}
    functests: pytest {posargs:tests/functional/}
    docs: sphinx-autobuild -BqT -b dirhtml -d {envdir}/doctrees . {envdir}/html
    checkdocs: sphinx-build -qTWn -b dirhtml -d {envdir}/doctrees . {envdir}/html
    {docstrings,checkdocstrings}: sphinx-apidoc -ePMF -a -H "Dooccsstrinngs!!" --ext-intersphinx --ext-todo --ext-viewcode -o {envdir}/rst .
    docstrings: sphinx-autobuild -BqT -z h -z tests -b dirhtml {envdir}/rst {envdir}/dirhtml
    checkdocstrings: sphinx-build -qTn -b dirhtml {envdir}/rst {envdir}/dirhtml
    coverage: -coverage combine
    coverage: coverage report --show-missing
    codecov: codecov
    docker-compose: docker-compose {posargs}
    pip-compile: pip-compile {posargs}
