[app:main]
use: call:h.websocket:create_app

# Use gevent-compatible transport for the Sentry client
raven.transport: gevent

# SQLAlchemy configuration -- See SQLAlchemy documentation
sqlalchemy.url: postgresql://postgres@localhost/postgres

[server:main]
use: egg:gunicorn
host: 0.0.0.0
port: 5001
worker_class: h.websocket.Worker
graceful_timeout: 0

[loggers]
keys = root, gunicorn.error, sentry, ws4py

[handlers]
keys = console, sentry

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console, sentry

[logger_gunicorn.error]
level = INFO
handlers =
qualname = gunicorn.error

[logger_sentry]
level = WARNING
handlers = console
qualname = sentry.errors
propagate = 0

[logger_ws4py]
level = WARNING
qualname = ws4py
handlers = console
# Prevent these messages filtering through to Sentry
propagate = 0

[handler_console]
level = NOTSET
class = StreamHandler
args = ()
formatter = generic

[handler_sentry]
level = WARNING
class = raven.handlers.logging.SentryHandler
args = ()
formatter = generic

[formatter_generic]
format = %(asctime)s [%(process)d] [%(name)s:%(levelname)s] %(message)s
