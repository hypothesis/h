swagger: "2.0"
info:
  version: 1.0.0
  title: Hypothesis API Reference
  description: |
    # Hypothesis API Reference

    This is a reference for the Hypothesis HTTP API.
    See [the API overview](../api/) for an introduction to the API and information
    on how authorization works.

    ## Expanding Resources

    Resources often contain links to related resources in their response bodies.
    Some endpoints support resource expansion, allowing those related resources
    to be expanded inline within the response.

    To expand resources (where supported), use the `expand` request parameter.
    Documentation for endpoints identify which resources are expandable, if any.

    ```
    GET /api/things?expand=organization&expand=foobar
    ```

    Values for `expand` are the fields to expand. The above would expand
    `organization` and `foobar` fields within the (hypothetical) returned `thing`
    objects. You can expand multiple fields by providing multiple values in the
    `expand` Array.

  termsOfService: https://hypothes.is/terms-of-service
  license:
    name: BSD (2-Clause)
    url: https://github.com/hypothesis/h/blob/master/LICENSE
host: hypothes.is
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  developerAPIKey:
    type: apiKey
    description: Authorize with a developer API key.
    name: Authorization
    in: header
  authClientCredentials:
    type: basic
    description: |
      Authorize using client credentials via HTTP Basic Auth.

      Client credentials must be registered with the `h` service and are
      associated with a particular _authority_. This type of credentials grant the
      ability to create and manipulate users and other resources within the
      associated authority.
  authClientForwardedUser:
    type: basic
    description: |
      Proxy as a user within an authority. Must be used in combination with
      `authClientCredentials`.

      In some cases, it is possible to make requests on behalf of valid users
      within the authority associated with auth client credentials. This is
      accomplished by setting an `X-Forwarded-User` header to the `userid` of
      a valid user within the auth client's associated authority.

      e.g. a request with valid auth client credentials associated with the authority
      `example.com` could set the following forwarded-user header (assuming this
      user exists):

      ```
      X-Forwarded-User: "acct:fiona_smith@example.com"
      ```
security:
  - developerAPIKey: []
tags:
  - name: general
    description: General and miscellaneous API services
  - name: annotations
    description: Annotation resource services
  - name: groups
    description: Group resource services
  - name: users
    description: User and profile resource services

paths:
  /:
    get:
      tags:
        - general
      summary: Service root
      description: Provides a list of links to resources offered by the API.
      operationId: root
      responses:
        '200':
          description: Success
      security: []
  /annotations:
    post:
      tags:
        - annotations
      summary: Create a new annotation
      operationId: createAnnotation
      parameters:
        - name: annotation
          in: body
          description: Annotation to be created
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: Annotation successfully created
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: Could not create annotation from your request
          schema:
            $ref: '#/definitions/Error'
  /annotations/{id}:
    get:
      tags:
        - annotations
      summary: Fetch an annotation
      operationId: fetchAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '404':
          description: Annotation not found or no permission to view
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - annotations
      summary: Update an annotation
      description: |
        This endpoint is available under both the `PATCH` and `PUT`
        request methods. Both endpoints have PATCH-characteristics
        as defined in [RFC5789](https://tools.ietf.org/html/rfc5789#section-1),
        meaning the request body does not have to include the whole annotation
        object.

        New implementations should use the `PATCH` request method, and existing
        implementations continue to work under `PUT` but should switch to `PATCH`.

      operationId: updateAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
        - name: annotation
          in: body
          description: Updated annotation body
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: Could not create annotation from your request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Annotation not found or no permission to update
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - annotations
      summary: Delete an annotation
      operationId: deleteAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: object
            required:
              - deleted
              - id
            properties:
              deleted:
                type: boolean
                enum:
                  - true
              id:
                type: string
        '404':
          description: Annotation not found or no permission to delete
          schema:
            $ref: '#/definitions/Error'
  /annotations/{id}/flag:
    put:
      tags:
        - annotations
      summary: Flag an annotation
      operationId: flagAnnotation
      description: >
        Flag an annotation for moderation. The administrator (moderator) of the
        group containing the annotation will be notified by email.
      parameters:
        - name: id
          in: path
          description: ID of annotation to flag for moderation
          required: true
          type: string
      responses:
        '204':
          description: Success
        '404':
          description: Annotation not found or no permission to flag
          schema:
            $ref: '#/definitions/Error'
  /annotations/{id}/hide:
    put:
      tags:
        - annotations
      summary: Hide an annotation
      operationId: hideAnnotation
      description: >
        Hide an annotation. The authenticated user needs to have the `moderate` permission for the group that contains the annotation—this permission is granted to the user who created the group.
      parameters:
        - name: id
          in: path
          description: ID of annotation to hide (moderate)
          required: true
          type: string
      responses:
        '204':
          description: Success
        '404':
          description: Annotation not found or no permission to moderate
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - annotations
      summary: Show an annotation
      operationId: unhideAnnotation
      description: >
        Show/"un-hide" an annotation. The authenticated user needs to have the `moderate` permission for the group that contains the annotation—this permission is granted to the user who created the group.
      parameters:
        - name: id
          in: path
          description: ID of annotation to show/un-hide
          required: true
          type: string
      responses:
        '204':
          description: Success
        '404':
          description: Annotation not found or no permission to moderate
          schema:
            $ref: '#/definitions/Error'

  /profile:
    get:
      tags:
        - users
      operationId: fetchProfile
      summary: Get the user's profile
      description: >
        This can either be accessed with an API key, in which case it will show
        the authenticated user's profile, or without, in which case it will show
        information for a logged-out profile, including only public groups for
        the current authority.
      parameters:
        - name: authority
          in: query
          description: >
            The current authority if the user is not logged in.
          required: false
          type: string
          default: "hypothes.is"
      responses:
        '200':
          description: Profile information
          schema:
            $ref: '#/definitions/Profile'
  /groups:
    get:
      tags:
        - groups
      summary: Get list of groups
      operationId: listGroups
      description: >
        Retrieve a list of accessible, applicable groups for this user for the
        provided target document (document_uri).

        Note: This API service is pre-release and currently under development.
        Be aware that parameters and response body will be changing.

      parameters:
        - name: authority
          in: query
          description: >
            Used to identify available public groups.
            Applies only to non-authorized requests.
          required: false
          type: string
          default: "hypothes.is"
        - name: document_uri
          in: query
          description: >
            The URI of the document currently being annotated.
            Used to filter appropriate groups
          required: false
          type: string
          format: uri
        - name: expand
          description: >
            Array of fields to expand in the response
          in: query
          type: array
          items:
            type: string
            enum:
              - organization
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GroupResults'
    post:
      tags:
        - groups
      summary: Create a new group
      operationId: createGroup
      description: >
        Create a new, private group for the currently-authenticated user.
      parameters:
        - name: group
          in: body
          description: Group to be created
          required: true
          schema:
            $ref: '#/definitions/NewGroup'
      responses:
        '200':
          description: Group successfully created
          schema:
            $ref: '#/definitions/GroupResult'
        '400':
          description: Could not create group from your request
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ConflictError'
      security:
        - authClientForwardedUser: []
        - developerAPIKey: []

  /groups/{id}:
    get:
      tags:
        - groups
      summary: Fetch a group
      description: >
        Any request (including unauthenticated requests) may retrieve any publicly-readable group.
        When using AuthClient credentials, it is additionally possible to retrieve any group within
        the associated authority.  Requests authenticated with an API key are able to retrieve any
        publicly-readable group as well as any private group that the authenticated user created or
        is a member of.
      operationID: getGroup
      parameters:
        - name: id
          in: path
          description: the group's `id` or `groupid`
          required: true
          type: string
        - name: expand
          description: >
            Array of fields to expand in the response
          in: query
          type: array
          items:
            type: string
            enum:
              - organization
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GroupResult'
      security:
        - authClientCredentials: []
        - developerAPIKey: []

    patch:
      tags:
        - groups
      summary: Update a  group
      operationId: patchGroup
      description: >
        Update an existing group. If `developerAPIKey` authentication is used, the authenticated user must be the group's creator. If `authClientCredentials` or `authClientForwardedUser` are used, the group's authority must match the client's authority.
      parameters:
        - name: id
          in: path
          description: The group's `id` or `groupid`
          required: true
          type: string
        - name: group
          in: body
          description: Group properties to update
          required: true
          schema:
            $ref: '#/definitions/UpdateGroup'
      responses:
        '200':
          description: Group successfully updated
          schema:
            $ref: '#/definitions/GroupResult'
        '400':
          description: Could not update group from your request
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ConflictError'
      security:
        - authClientForwardedUser: []
        - authClientCredentials: []
        - developerAPIKey: []

    put:
      tags:
        - groups
      summary: Create or Update a Group
      operationId: upsertGroup
      description: >
        <mark>Experimental/New</mark> This is an experimental and new API service. It is recommended that, where feasible, the discrete `POST` and `PATCH` endpoints be used to create and update groups. This endpoint acts akin to an "UPSERT" operation and is for advanced use cases only.

        <ul>
        <li>If the group indicated by `id` in the path does not exist, a new group will be created. This is identical in functionality to the `POST /api/groups` endpoint.</li>
        <li>If the group indicated by `id` in the path does exist AND the authenticated user is authorized to update the group (i.e. is the group's creator), that group resource will be _replaced_ by the payload of the request. Please be aware that this is a PUT, not a PATCH—the group is overwritten, not patched.</li>
        </ul>
      parameters:
        - name: id
          in: path
          description: The group's `id` or `groupid`
          required: true
          type: string
        - name: group
          in: body
          description: Full representation of group
          required: true
          schema:
            $ref: '#/definitions/NewGroup'
      responses:
        '200':
          description: Group successfully created or updated
          schema:
            $ref: '#/definitions/GroupResult'
        '400':
          description: Could not create or update group from your request
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ConflictError'
      security:
        - authClientForwardedUser: []
        - developerAPIKey: []


  /search:
    get:
      tags:
        - annotations
      summary: Search for annotations
      operationId: search
      parameters:
        - name: limit
          in: query
          description: The maximum number of annotations to return.
          required: false
          type: integer
          minimum: 0
          maximum: 200
          default: 20
        - name: search_after
          in: query
          description: Returns results after the annotation who's sort field has this value.
            If specifying a date use the format yyyy-MM-dd'T'HH:mm:ss.SSX or time in
            miliseconds since the epoch. This is used for iteration through large collections
            of results.
          required: false
          type: string
        - name: offset
          in: query
          description: >
            The number of initial annotations to skip. This is used for pagination. Not
            suitable for paging through thousands of annotations-search_after should be
            used instead.
          required: false
          type: integer
          default: 0
          minimum: 0
          maximum: 9800
        - name: sort
          in: query
          description: The field by which annotations should be sorted.
          required: false
          type: string
          enum: [created, updated, group, id, user]
          default: updated
        - name: order
          in: query
          description: The order in which the results should be sorted.
          required: false
          type: string
          enum: [asc, desc]
          default: desc
        - name: uri
          in: query
          description: |
            Limit the results to annotations matching the specific URI or equivalent URIs.

            URI can be a URL (a web page address) or a URN representing another kind of
            resource such as DOI (Digital Object Identifier) or a PDF fingerprint.
          required: false
          type: string
        - name: uri.parts
          in: query
          description: |
            Limit the results to annotations containing the given keyword in
            the URL.
        - name: url
          in: query
          description: |
            Alias of `uri`.
          required: false
          type: string
        - name: wildcard_uri
          in: query
          description: |
            Limit the results to annotations matching the wildcard URI.
            URI can be a URL (a web page address) or a URN representing another
            kind of resource such as DOI (Digital Object Identifier) or a
            PDF fingerprint.

            `*` will match any character sequence (including an empty one),
            and a `_` will match any single character. Wildcards are only permitted
            within the path and query parts of the URI.

            Escaping wildcards is not supported.

            Examples of valid uris: `http://foo.com/*` `urn:x-pdf:*` `file://localhost/_bc.pdf`

            Examples of invalid uris: `*foo.com` `u_n:*` `file://*` `http://foo.com*`

            <mark>This feature is experimental and the API may change.</mark>
          required: false
          type: string
        - name: user
          in: query
          description: Limit the results to annotations made by the specified user.
          required: false
          type: string
        - name: group
          in: query
          description: Limit the results to annotations made in the specified group.
          required: false
          type: string
        - name: tag
          in: query
          description: Limit the results to annotations tagged with the specified value.
          required: false
          type: string
        - name: tags
          in: query
          description: Alias of `tag`.
          required: false
          type: string
        - name: any
          in: query
          description: Limit the results to annotations whose quote, tags, text or url
            fields contain this keyword.
          required: false
          type: string
        - name: group
          in: query
          description: Limit the results to this group of annotations.
          required: false
          type: string
        - name: quote
          in: query
          description: Limit the results to annotations that contain this text inside
            the text that was annotated.
          required: false
          type: string
        - name: references
          in: query
          description: Returns annotations that are replies to this parent annotation id.
          required: false
          type: string
        - name: text
          in: query
          description: Limit the results to annotations that contain this text in their
            textual body.
          required: false
          type: string
      responses:
        '200':
          description: Search results
          schema:
            $ref: '#/definitions/SearchResults'
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      description: |
        Only for specific auth clients, this API call allows clients with a
        designated authority to create users within their authority. Optional
        identity information may be provided to maintain provider-specific
        metadata about users.

        This endpoint will return an HTTP 409 (Conflict) if the request represents
        a duplicate of an existing user—email, username or identity collision.
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '200':
          description: User successfully created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Could not create user from your request
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Conflict
          schema:
            $ref: '#/definitions/ConflictError'
      security:
        - authClientCredentials: []
  /users/{username}:
    patch:
      tags:
        - users
      summary: Update an existing user
      description: |
        Only for specific auth clients, this API call allows clients with a
        designated authority to update users within their authority.
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '200':
          description: User successfully updated
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Could not update user from your request
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
  /groups/{id}/members/{user}:
    delete:
      tags:
        - groups
      summary: Remove a member from a group
      operationId: deleteGroupMember
      parameters:
        - name: id
          in: path
          description: Public ID of the group
          required: true
          type: string
        - name: userid
          in: path
          description: |
            The userid of the user to remove from the group. For now, only the value `me` is
            supported, representing the currently-authenticated user.
          required: true
          type: string
          enum: ['me']
      responses:
        '204':
          description: Success
        '404':
          description: Group not found
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - groups
      summary: Add a member to a group
      operationId: addGroupMember
      parameters:
        - name: id
          in: path
          description: Public ID of the group
          required: true
          type: string
        - name: userid
          in: path
          description: |
            User ID of the user to add to the group.
            The userID should be of the format `acct:<username>@<authority>`
          required: true
          type: string
      responses:
        '204':
          description: Success
        '404':
          description: User or Group not found
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
definitions:
  NewAnnotation:
    $ref: './schemas/annotation-schema.json'
  Annotation:
    allOf:
      - $ref: '#/definitions/NewAnnotation'
      - required:
        - id
        properties:
          id:
            type: string
  Error:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - failure
      reason:
        type: string
        description: A human-readable description of the reason(s) for failure.
  ConflictError:
    description: An error indicating a resource conflict, typically because a duplicate resource already exists.
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - failure
      reason:
        type: string
        description: One or more human-readable errors describing the conflict.
  SearchResults:
    type: object
    required:
      - rows
      - total
    properties:
      rows:
        type: array
        items:
          $ref: '#/definitions/Annotation'
      total:
        description: Total number of results matching query.
        type: integer
  NewGroup:
    $ref: './schemas/new-group.yaml#/Group'
  UpdateGroup:
    $ref: './schemas/update-group.yaml#/Group'
  GroupResult:
    $ref: './schemas/group.yaml#/Group'
  GroupResults:
    type: array
    items:
      $ref: './schemas/group.yaml#/Group'
  NewUser:
    $ref: './schemas/new-user-schema.json'
  UpdateUser:
    $ref: './schemas/update-user-schema.json'
  User:
    $ref: './schemas/user-schema.json'
  Profile:
    $ref: './schemas/profile-schema.json'
