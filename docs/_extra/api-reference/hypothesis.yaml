swagger: "2.0"
info:
  version: 1.0.0
  title: Hypothesis API Reference
  description: |
    # Hypothesis API Reference

    This is a reference for the Hypothesis HTTP API.
    See [the API overview](../api/) for an introduction to the API and information
    on how authorization works.

  termsOfService: https://hypothes.is/terms-of-service
  license:
    name: BSD (2-Clause)
    url: https://github.com/hypothesis/h/blob/master/LICENSE
host: hypothes.is
basePath: /api
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  developerAPIKey:
    type: apiKey
    description: Authorize with a developer API key.
    name: Authorization
    in: header
  authClientCredentials:
    type: basic
    description: Authorize using OAuth client credentials with HTTP Basic Auth.
security:
  - developerAPIKey: []
paths:
  /:
    get:
      summary: Service root
      description: Provides a list of links to resources offered by the API.
      operationId: root
      responses:
        '200':
          description: Success
      security: []
  /annotations:
    post:
      summary: Create a new annotation
      operationId: createAnnotation
      parameters:
        - name: annotation
          in: body
          description: Annotation to be created
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: Annotation successfully created
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: Could not create annotation from your request
          schema:
            $ref: '#/definitions/Error'
  /annotations/{id}:
    get:
      summary: Fetch an annotation
      operationId: fetchAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '404':
          description: Annotation not found or no permission to view
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: Update an annotation
      description: |
        This endpoint is available under both the `PATCH` and `PUT`
        request methods. Both endpoints have PATCH-characteristics
        as defined in [RFC5789](https://tools.ietf.org/html/rfc5789#section-1),
        meaning the request body does not have to include the whole annotation
        object.

        New implementations should use the `PATCH` request method, and existing
        implementations continue to work under `PUT` but should switch to `PATCH`.

      operationId: updateAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
        - name: annotation
          in: body
          description: Updated annotation body
          required: true
          schema:
            $ref: '#/definitions/NewAnnotation'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Annotation'
        '400':
          description: Could not create annotation from your request
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Annotation not found or no permission to update
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Delete an annotation
      operationId: deleteAnnotation
      parameters:
        - name: id
          in: path
          description: ID of annotation to return
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: object
            required:
              - deleted
              - id
            properties:
              deleted:
                type: boolean
                enum:
                  - true
              id:
                type: string
        '404':
          description: Annotation not found or no permission to delete
          schema:
            $ref: '#/definitions/Error'
  /profile:
    get:
      summary: Get the user's profile
      description: >
        This can either be accessed with an API key, in which case it will show
        the authenticated user's profile, or without, in which case it will show
        information for a logged-out profile, including only public groups for
        the current authority.
      parameters:
        - name: authority
          in: query
          description: >
            The current authority if the user is not logged in.
          required: false
          type: string
          default: "hypothes.is"
      responses:
        '200':
          description: Profile information
          schema:
            $ref: '#/definitions/Profile'
  /search:
    get:
      summary: Search for annotations
      operationId: search
      parameters:
        - name: limit
          in: query
          description: The maximum number of annotations to return.
          required: false
          type: integer
          minimum: 0
          maximum: 200
          default: 20
        - name: offset
          in: query
          description: >
            The minimum number of initial annotations to skip. This is
            used for pagination.
          required: false
          type: integer
          default: 0
          minimum: 0
        - name: sort
          in: query
          description: The field by which annotations should be sorted.
          required: false
          type: string
          default: updated
        - name: order
          in: query
          description: The order in which the results should be sorted.
          required: false
          type: string
          enum: [asc, desc]
          default: desc
        - name: uri
          in: query
          description: |
            Limit the results to annotations matching the specific URI or equivalent URIs.

            URI can be a URL (a web page address) or a URN representing another kind of resource such as DOI (Digital Object Identifier) or a PDF fingerprint.
          required: false
          type: string
        - name: url
          in: query
          description: |
            Alias of `uri`.
          required: false
          type: string
        - name: user
          in: query
          description: Limit the results to annotations made by the specified user.
          required: false
          type: string
        - name: group
          in: query
          description: Limit the results to annotations made in the specified group.
          required: false
          type: string
        - name: tag
          in: query
          description: Limit the results to annotations tagged with the specified value.
          required: false
          type: string
        - name: any
          in: query
          description: |
            Limit the results to annotations in which one of a number of common fields contain the passed value.
          required: false
          type: string
      responses:
        '200':
          description: Search results
          schema:
            $ref: '#/definitions/SearchResults'
  /users:
    post:
      summary: Create a new user
      description: |
        Only for specific auth clients, this API call allows clients with a
        designated authority to create users within their authority.
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        '200':
          description: User successfully created
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Could not create user from your request
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
  /users/{username}:
    patch:
      summary: Update an existing user
      description: |
        Only for specific auth clients, this API call allows clients with a
        designated authority to update users within their authority.
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: User to be created
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '200':
          description: User successfully updated
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Could not update user from your request
          schema:
            $ref: '#/definitions/Error'
      security:
        - authClientCredentials: []
  /groups/{id}/members/{user}:
    delete:
      summary: Remove a member from a group
      operationId: deleteGroupMember
      parameters:
        - name: id
          in: path
          description: Public ID of the group
          required: true
          type: string
        - name: user
          in: path
          description: |
            The user to remove from the group. For now, only the value `me` is
            supported, representing the currently-authenticated user.
          required: true
          type: string
          enum: ['me']
      responses:
        '204':
          description: Success
        '404':
          description: Group not found
          schema:
            $ref: '#/definitions/Error'
definitions:
  NewAnnotation:
    $ref: './schemas/annotation-schema.json'
  Annotation:
    allOf:
      - $ref: '#/definitions/NewAnnotation'
      - required:
        - id
        properties:
          id:
            type: string
  Error:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - failure
      reason:
        type: string
        description: A human-readable description of the reason(s) for failure.
  SearchResults:
    type: object
    required:
      - rows
      - total
    properties:
      rows:
        type: array
        items:
          $ref: '#/definitions/Annotation'
      total:
        description: Total number of results matching query.
        type: integer
  NewUser:
    $ref: './schemas/new-user-schema.json'
  UpdateUser:
    $ref: './schemas/update-user-schema.json'
  User:
    $ref: './schemas/user-schema.json'
  Profile:
    $ref: './schemas/profile-schema.json'
