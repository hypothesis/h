// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-8df4e2b
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2013-11-30 01:47:57Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Annotator.Plugin.DomTextMapper = (function(_super) {
    __extends(DomTextMapper, _super);

    function DomTextMapper() {
      this._onCorpusChange = __bind(this._onCorpusChange, this);
      _ref = DomTextMapper.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DomTextMapper.prototype.pluginInit = function() {
      var _this = this;
      return this.annotator.documentAccessStrategies.unshift({
        name: "DOM-Text-Mapper",
        applicable: function() {
          return true;
        },
        get: function() {
          var defaultOptions, mapper, options;
          defaultOptions = {
            rootNode: _this.annotator.wrapper[0],
            getIgnoredParts: function() {
              return $.makeArray($(["div.annotator-notice", "div.annotator-outer", "div.annotator-editor", "div.annotator-viewer", "div.annotator-adder"].join(", ")));
            },
            cacheIgnoredParts: true
          };
          options = $.extend({}, defaultOptions, _this.options.options);
          mapper = new window.DomTextMapper(options);
          options.rootNode.addEventListener("corpusChange", _this._onCorpusChange);
          return mapper;
        }
      });
    };

    DomTextMapper.prototype._onCorpusChange = function() {
      if (this.options.trackChanges) {
        return this._trackChanges();
      } else {
        return console.log("WARNING: Corpus has changed. Expect trouble!");
      }
    };

    DomTextMapper.prototype._trackChanges = function() {
      var anchor, anchors, annotation, annotations, page, _i, _j, _len, _len1, _ref1, _ref2;
      console.log("Engaging experimental document change tracking mode");
      annotations = this.annotator.orphans.slice();
      _ref1 = this.annotator.anchors;
      for (page in _ref1) {
        anchors = _ref1[page];
        _ref2 = anchors.slice();
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          anchor = _ref2[_i];
          annotation = anchor.annotation;
          if (__indexOf.call(annotations, annotation) < 0) {
            annotations.push(annotation);
          }
          anchor.remove(true);
        }
      }
      for (_j = 0, _len1 = annotations.length; _j < _len1; _j++) {
        annotation = annotations[_j];
        this.annotator.anchorAnnotation(annotation);
      }
      return this.annotator.publish("annotationsLoaded", [annotations.slice()]);
    };

    return DomTextMapper;

  })(Annotator.Plugin);

}).call(this);

//
//@ sourceMappingURL=annotator.domtextmapper.map