// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-511ebaa
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2014-10-26 00:44:09Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var TextHighlight, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TextHighlight = (function(_super) {
    __extends(TextHighlight, _super);

    TextHighlight.highlightClass = 'annotator-hl';

    TextHighlight.Annotator = Annotator;

    TextHighlight.$ = Annotator.$;

    TextHighlight.highlightType = 'TextHighlight';

    TextHighlight.isInstance = function(element) {
      return this.$(element).hasClass('annotator-hl');
    };

    TextHighlight.getIndependentParent = function(element) {
      return this.$(element).parents(':not([class^=annotator-hl])')[0];
    };

    TextHighlight._inited = [];

    TextHighlight.getAnnotations = function(event) {
      return TextHighlight.$(event.target).parents('.annotator-hl').andSelf().map(function() {
        return TextHighlight.$(this).data("annotation");
      }).toArray();
    };

    TextHighlight._init = function(annotator) {
      var _this = this;
      if (__indexOf.call(this._inited, annotator) >= 0) {
        return;
      }
      annotator.element.delegate(".annotator-hl", "mouseover", this, function(event) {
        return annotator.onAnchorMouseover(event);
      });
      annotator.element.delegate(".annotator-hl", "mouseout", this, function(event) {
        return annotator.onAnchorMouseout(event);
      });
      annotator.element.delegate(".annotator-hl", "mousedown", this, function(event) {
        return annotator.onAnchorMousedown(event);
      });
      annotator.element.delegate(".annotator-hl", "click", this, function(event) {
        return annotator.onAnchorClick(event);
      });
      return this._inited.push(annotator);
    };

    TextHighlight.prototype._highlightRange = function(normedRange, cssClass) {
      var event, hl, node, nodes, r, white, _i, _len;
      if (cssClass == null) {
        cssClass = 'annotator-hl';
      }
      white = /^\s*$/;
      hl = this.$("<span class='" + cssClass + "'></span>");
      nodes = this.$(normedRange.textNodes()).filter(function(i) {
        return !white.test(this.nodeValue);
      });
      r = nodes.wrap(hl).parent().show().toArray();
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        event = document.createEvent("UIEvents");
        event.initUIEvent("domChange", true, false, window, 0);
        event.reason = "created hilite";
        node.dispatchEvent(event);
      }
      return r;
    };

    TextHighlight.prototype._highlightRanges = function(normedRanges, cssClass) {
      var highlights, r, _i, _len;
      if (cssClass == null) {
        cssClass = 'annotator-hl';
      }
      highlights = [];
      for (_i = 0, _len = normedRanges.length; _i < _len; _i++) {
        r = normedRanges[_i];
        this.$.merge(highlights, this._highlightRange(r, cssClass));
      }
      return highlights;
    };

    function TextHighlight(anchor, pageIndex, normedRange) {
      this.select = __bind(this.select, this);
      TextHighlight.__super__.constructor.call(this, anchor, pageIndex);
      TextHighlight._init(this.annotator);
      this.$ = TextHighlight.$;
      this.Annotator = TextHighlight.Annotator;
      this._highlights = this._highlightRange(normedRange);
      this.$(this._highlights).data("annotation", this.annotation);
    }

    TextHighlight.prototype.isTemporary = function() {
      return this._temporary;
    };

    TextHighlight.prototype.setTemporary = function(value) {
      this._temporary = value;
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-temporary');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-temporary');
      }
    };

    TextHighlight.prototype.setActive = function(value) {
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-active');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-active');
      }
    };

    TextHighlight.prototype.setFocused = function(value) {
      if (value) {
        return this.$(this._highlights).addClass('annotator-hl-focused');
      } else {
        return this.$(this._highlights).removeClass('annotator-hl-focused');
      }
    };

    TextHighlight.prototype.removeFromDocument = function() {
      var child, event, hl, _i, _len, _ref, _results;
      _ref = this._highlights;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hl = _ref[_i];
        if ((hl.parentNode != null) && this.annotator.domMapper.isPageMapped(this.pageIndex)) {
          child = hl.childNodes[0];
          this.$(hl).replaceWith(hl.childNodes);
          event = document.createEvent("UIEvents");
          event.initUIEvent("domChange", true, false, window, 0);
          event.reason = "removed hilite (annotation deleted)";
          _results.push(child.parentNode.dispatchEvent(event));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    TextHighlight.prototype._getDOMElements = function() {
      return this._highlights;
    };

    TextHighlight.prototype.select = function() {
      var hl, r, selection, _i, _len, _ref, _results;
      selection = this.Annotator.util.getGlobal().getSelection();
      _ref = this._highlights;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hl = _ref[_i];
        r = document.createRange();
        r.setStartBefore(hl);
        r.setEndAfter(hl);
        _results.push(selection.addRange(r));
      }
      return _results;
    };

    return TextHighlight;

  })(Annotator.Highlight);

  Annotator.Plugin.TextHighlights = (function(_super) {
    __extends(TextHighlights, _super);

    function TextHighlights() {
      _ref = TextHighlights.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextHighlights.prototype.pluginInit = function() {
      return Annotator.TextHighlight = TextHighlight;
    };

    return TextHighlights;

  })(Annotator.Plugin);

}).call(this);
