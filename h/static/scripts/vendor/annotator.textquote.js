// Generated by CoffeeScript 1.6.3
/*
** Annotator 1.2.6-dev-accf82f
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2015-01-17 10:04:35Z
*/



/*
//
*/

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Annotator.Plugin.TextQuote = (function(_super) {
    __extends(TextQuote, _super);

    function TextQuote() {
      this._getTextQuoteSelector = __bind(this._getTextQuoteSelector, this);
      _ref = TextQuote.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TextQuote.Annotator = Annotator;

    TextQuote.$ = Annotator.$;

    TextQuote.prototype.pluginInit = function() {
      var _this = this;
      this.anchoring = this.annotator.anchoring;
      this.anchoring.selectorCreators.push({
        name: "TextQuoteSelector",
        describe: this._getTextQuoteSelector
      });
      return this.anchoring.getQuoteForTarget = function(target) {
        var selector;
        selector = _this.anchoring.findSelector(target.selector, "TextQuoteSelector");
        if (selector != null) {
          return _this.anchoring.normalizeString(selector.exact);
        } else {
          return null;
        }
      };
    };

    TextQuote.prototype._getTextQuoteSelector = function(selection) {
      var document, endOffset, prefix, quote, rangeEnd, rangeStart, startOffset, suffix, _ref1;
      if (selection.type !== "text range") {
        return [];
      }
      document = this.anchoring.document;
      if (selection.range == null) {
        throw new Error("Called getTextQuoteSelector() with null range!");
      }
      rangeStart = selection.range.start;
      if (rangeStart == null) {
        throw new Error("Called getTextQuoteSelector() on a range with no valid start.");
      }
      rangeEnd = selection.range.end;
      if (rangeEnd == null) {
        throw new Error("Called getTextQuoteSelector() on a range with no valid end.");
      }
      if (document.getStartPosForNode != null) {
        startOffset = document.getStartPosForNode(rangeStart);
        endOffset = document.getEndPosForNode(rangeEnd);
        if ((startOffset != null) && (endOffset != null)) {
          quote = document.getCorpus().slice(startOffset, +(endOffset - 1) + 1 || 9e9).trim();
          _ref1 = document.getContextForCharRange(startOffset, endOffset), prefix = _ref1[0], suffix = _ref1[1];
          return [
            {
              type: "TextQuoteSelector",
              exact: quote,
              prefix: prefix,
              suffix: suffix
            }
          ];
        } else {
          console.log("Warning: can't generate TextQuote selector.", startOffset, endOffset);
          return [];
        }
      } else {
        return [
          {
            type: "TextQuoteSelector",
            exact: selection.range.text().trim()
          }
        ];
      }
    };

    return TextQuote;

  })(Annotator.Plugin);

}).call(this);

//
//# sourceMappingURL=annotator.textquote.map