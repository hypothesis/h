<html><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
  <title>dev.txtpen</title>
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.min.css">
  <link rel="apple-touch-icon" sizes="152x152"
          href="{{ base_url }}assets/images/apple-touch-icon-152x152.png">
    <link rel="icon" type="image/png" sizes="16x16"
          href="{{ base_url }}assets/images/favicons/favicon-16x16.png">
    <link rel="icon" type="image/png" sizes="32x32"
          href="{{ base_url }}assets/images/favicons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96"
          href="{{ base_url }}assets/images/favicons/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="192x192"
          href="{{ base_url }}assets/images/favicons/android-chrome-192x192.png">
    <link rel="shortcut icon"
          href="{{ base_url }}assets/images/favicons/favicon.ico">
  <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
  <link href="https://rawgithub.com/masukomi/kudos/master/kudos.css" media="screen" rel="stylesheet" type="text/css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.4/semantic.min.js"></script>
  <script type="text/javascript" src="https://rawgithub.com/masukomi/kudos/master/jquery.cookie.js"></script>

  <script async src="http://dev.txtpen.com:5000/embed.js"></script>
<script type="application/json" class="js-hypothesis-config">
  {
    "openSidebar": false,
    "showHighlights": true
  }
</script>
  <script>
(function() {
  var Kudoable,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Kudoable = (function() {
    function Kudoable(element) {
      this.element = element;
      this.unkudo = __bind(this.unkudo, this);
      this.complete = __bind(this.complete, this);
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      this.bindEvents();
      this.counter = $('.count .num', this.element);
      this.element.data('kudoable', this);

      
    }

    Kudoable.prototype.onMouseUpdate = function(e) {
        var el = $('figure.kudoable')[0];
        if (el) {
          var rect = el.getBoundingClientRect();
          var pos_x = (rect.right + rect.left) / 2;
          var pos_y = (rect.top + rect.bottom) / 2;
          var x, y, distance = null;
          x = e.pageX;
          y = e.pageY;
          thisdistance = Math.sqrt(Math.pow(pos_x - x, 2) + Math.pow(pos_y - y, 2));
          if (thisdistance < 550) {
            $(el).css('opacity', 1 - thisdistance / 300);
          } else {
            el.remove();
          }
        }
    }

    Kudoable.prototype.bindEvents = function() {
      this.element.mouseenter(this.start);
      this.element.mouseleave(this.end);
      this.element.click(this.unkudo);
      $(this.element).on('touchstart', this.element, this.start);
      document.addEventListener('mousemove', this.onMouseUpdate, false);
      document.addEventListener('mouseenter', this.onMouseUpdate, false);
      return $(this.element).on('touchend', this.element, this.end);
    };

    Kudoable.prototype.isKudoable = function() {
      return this.element.hasClass('kudoable');
    };

    Kudoable.prototype.isKudod = function() {
      return this.element.hasClass('complete');
    };

    Kudoable.prototype.start = function() {
      if (this.isKudoable() && !this.isKudod()) {
        this.element.trigger('kudo:active');
        this.element.addClass('active');
        return this.timer = setTimeout(this.complete, 700);
      }
    };

    Kudoable.prototype.end = function() {
      if (this.isKudoable() && !this.isKudod()) {
        this.element.trigger('kudo:inactive');
        this.element.removeClass('active');
        if (this.timer != null) {
          return clearTimeout(this.timer);
        }
      }
    };

    Kudoable.prototype.complete = function() {
      this.end();
      this.incrementCount();
      this.element.addClass('complete');
      return this.element.trigger('kudo:added');
    };

    Kudoable.prototype.unkudo = function(event) {
      event.preventDefault();
      if (this.isKudod()) {
        this.decrementCount();
        this.element.removeClass('complete');
        return this.element.trigger('kudo:removed');
      }
    };

    Kudoable.prototype.setCount = function(count) {
      return this.counter.html(count);
    };

    Kudoable.prototype.currentCount = function() {
      return parseInt(this.counter.html());
    };

    Kudoable.prototype.incrementCount = function() {
      return this.setCount(this.currentCount() + 1);
    };

    Kudoable.prototype.decrementCount = function() {
      return this.setCount(this.currentCount() - 1);
    };

    return Kudoable;

  })();

  jQuery(function($) {
    return $.fn.kudoable = function() {
      return this.each(function() {
        return new Kudoable($(this));
      });
    };
  });

}).call(this);
</script>

</head>
<body>

<h1 class="ui center aligned header">The API is <a href="http://dev.txtpen.com:5000/api/">up</a>.</h1>

<div class="ui text container">
  <div class="ui segments">
    <div class="ui segment">
    <img src="http://dev.txtpen.com:5000/assets/images/favicons/android-chrome-192x192.png"></p>
    Locksmiths get less tip for being faster. There is a clever trick from Svbtle: artificial delay increases perceived value. By allowing user spending more time waiting, it makes the user feel more invested.
    </div>
    <div class="ui segment">
    I'm rewriting the front-end to make it more user-friendly. A lot of basic funtionality is broken.
    </div>
  </div>
</div>


<style>
  .last.container {
    margin-bottom: 300px !important;
  }
  h1.ui.center.header {
    margin-top: 3em;
  }
  h2.ui.center.header {
    margin: 4em 0em 2em;
  }
  h3.ui.center.header {
    margin-top: 2em;
    padding: 2em 0em;
  }
</style>

<script type="text/javascript">
$(document).ready(function() {

  var
    $headers     = $('body > h3'),
    $header      = $headers.first(),
    ignoreScroll = false,
    timer
  ;

  // Preserve example in viewport when resizing browser
  $(window)
    .on('resize', function() {
      // ignore callbacks from scroll change
      clearTimeout(timer);
      $headers.visibility('disable callbacks');

      // preserve position
      $(document).scrollTop( $header.offset().top );

      // allow callbacks in 500ms
      timer = setTimeout(function() {
        $headers.visibility('enable callbacks');
      }, 500);
    })
  ;
  $headers
    .visibility({
      // fire once each time passed
      once: false,

      // don't refresh position on resize
      checkOnRefresh: true,

      // lock to this element on resize
      onTopPassed: function() {
        $header = $(this);
      },
      onTopPassedReverse: function() {
        $header = $(this);
      }
    })
  ;
});


function getSelectionCoords(win) {
  win = win || window;
  var doc = win.document;
  var sel = doc.selection,
    range, rects, rect;
  var x = 0,
    y = 0;
  if (sel) {
    if (sel.type != "Control") {
      range = sel.createRange();
      range.collapse(true);
      x = range.boundingLeft;
      y = range.boundingTop;
    }
  } else if (win.getSelection) {
    sel = win.getSelection();
    if (sel.rangeCount) {
      range = sel.getRangeAt(0).cloneRange();
      if (range.getClientRects) {
        range.collapse(true);
        rects = range.getClientRects();
        if (rects.length > 0) {
          rect = rects[0];
        }
        x = rect.left;
        y = rect.top;
      }
      // Fall back to inserting a temporary element
      if (x == 0 && y == 0) {
        var span = doc.createElement("span");
        if (span.getClientRects) {
          // Ensure span has dimensions and position by
          // adding a zero-width space character
          span.appendChild(doc.createTextNode("\u200b"));
          range.insertNode(span);
          rect = span.getClientRects()[0];
          x = rect.left;
          y = rect.top;
          var spanParent = span.parentNode;
          spanParent.removeChild(span);

          // Glue any broken text nodes back together
          spanParent.normalize();
        }
      }
    }
  }
  return {
    x: x,
    y: y
  };
}

document.ondblclick = function() {
  
};

var t_0 = '';
var t = '';
function gText(e) {
    t = (document.all) ? document.selection.createRange().text : document.getSelection();
    if (t && t != "") {
      var coords = getSelectionCoords();
      var x = coords.x + 'px';
      var y = coords.y + 'px';
      var figure = `
        <figure class="kudo kudoable" data-id="1">
            <a class="kudobject">
                <div class="opening"><div class="circle">&nbsp;</div></div>
            </a>
        </figure>
        `;
      var outerDiv = $('<div>').css({
        "position": "absolute",
        "left": x,
        "top": y
      });
    outerDiv.append(figure);
    $(document.body).append(outerDiv);
    $("figure.kudoable").kudoable();
  }
    // get mouse position
    // alert selected text
}

document.onmouseup = gText;
if (!document.all) document.captureEvents(Event.MOUSEUP);




</script>



</body></html>
